type software_types__controloutput__impl = struct {armed : bool; pitch : real; roll : real; throttle : real; time : int; yaw : real};
type software_types__userinput_result__impl = struct {pitch : real; roll : real; throttle : real; time : int; xsource : int; yaw : real};
type software_types__control_data__impl = struct {param_reader_ALT_POS_D : real; param_reader_ALT_POS_I : real; param_reader_ALT_POS_IMAX : real; param_reader_ALT_POS_P : real; param_reader_ALT_RATE_D : real; param_reader_ALT_RATE_I : real; param_reader_ALT_RATE_IMAX : real; param_reader_ALT_RATE_P : real; param_reader_ALT_UI_DEAD : real; param_reader_ALT_UI_SENS : real; param_reader_FS_ALT_OFFS : real; param_reader_PITRLL_UI_SENS : real; param_reader_PIT_RATE_D : real; param_reader_PIT_RATE_I : real; param_reader_PIT_RATE_IMAX : real; param_reader_PIT_RATE_P : real; param_reader_PIT_STAB_D : real; param_reader_PIT_STAB_I : real; param_reader_PIT_STAB_IMAX : real; param_reader_PIT_STAB_P : real; param_reader_POS_THRUST_D : real; param_reader_POS_THRUST_I : real; param_reader_POS_THRUST_IMAX : real; param_reader_POS_THRUST_P : real; param_reader_POS_UI_SENS : real; param_reader_RLL_RATE_D : real; param_reader_RLL_RATE_I : real; param_reader_RLL_RATE_IMAX : real; param_reader_RLL_RATE_P : real; param_reader_RLL_STAB_D : real; param_reader_RLL_STAB_I : real; param_reader_RLL_STAB_IMAX : real; param_reader_RLL_STAB_P : real; param_reader_YAW_RATE_D : real; param_reader_YAW_RATE_I : real; param_reader_YAW_RATE_IMAX : real; param_reader_YAW_RATE_P : real; param_reader_YAW_STAB_D : real; param_reader_YAW_STAB_I : real; param_reader_YAW_STAB_IMAX : real; param_reader_YAW_STAB_P : real; param_reader_YAW_UI_SENS : real};
type software_types__control_law__impl = struct {armed_mode : int; autothr_source : int; head_source : int; stab_source : int; thr_mode : int; time : int; ui_source : int; yaw_mode : int};

node main(
  user_input___EVENT_ : bool;
  user_input : software_types__userinput_result__impl;
  control_params___EVENT_ : bool;
  control_params : software_types__control_data__impl;
  control_law___EVENT_ : bool;
  control_law : software_types__control_law__impl;
  sensor_data___EVENT_ : bool;
  mode : int;
  control_out___EVENT_ : bool;
  control_out : software_types__controloutput__impl
) returns (

);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  execs_since_last_control_law : int;
let
  --%MAIN;
  __GUARANTEE0 = (((mode <> 1) and (execs_since_last_control_law >= 2)) => (mode = 3));

  __GUARANTEE1 = ((mode = 1) => ((((control_out.throttle = 0.0) and (control_out.roll = 0.0)) and (control_out.pitch = 0.0)) and (control_out.yaw = 0.0)));

  __GUARANTEE2 = (if control_law___EVENT_ then (mode = control_law.armed_mode) else (mode = (1 -> (pre mode))));

  execs_since_last_control_law = (if control_law___EVENT_ then 0 else ((0 -> (pre execs_since_last_control_law)) + 1));

  --%PROPERTY __GUARANTEE0;
  --%PROPERTY __GUARANTEE1;
  --%PROPERTY __GUARANTEE2;

  --%REALIZABLE user_input___EVENT_, user_input, control_params___EVENT_, control_params, control_law___EVENT_, control_law, sensor_data___EVENT_;

tel;


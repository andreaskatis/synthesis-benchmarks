type turn = enum{P0, P1};

node limitedbox(posx : int; posy : int) returns ();
var
  turn : turn;
  ok, t1, t2 : bool;
let
  turn = P0 -> if pre(turn) = P0 then P1 else P0;
  t1 = (pre(posy) = posy or pre(posy) = posy + 1 or pre(posy) = posy -1) and
        (pre(posx) = posx) and pre(turn) = P0;

  t2 = (pre(posx) = posx or pre(posx) = posx + 1 or pre(posx) = posx - 1) and
        pre(posy) = posy and pre(turn) = P1;
  ok = (posy >= posx - 2 and posy <= posx + 2) ->
    ((t1 or t2) => (posy >= posx -2 and posy <= posx + 2));
  --%PROPERTY ok;
  --%REALIZABLE;
  tel;

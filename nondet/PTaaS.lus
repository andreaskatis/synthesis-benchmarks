type USER_location = real;
type USER_byte = real;
type USER_penta = real;
type USER_realensity = real;
type USER_tuple = struct {USER_x : USER_location; USER_y : USER_location; USER_z : USER_location};
type USER_bit = real;
type USER_rgb = struct {USER_b : USER_realensity; USER_g : USER_realensity; USER_r : USER_realensity};

node initially(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal -> true);

tel;

node historically(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal and (true -> (pre holds)));

tel;

node once(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal or (false -> (pre holds)));

tel;

node since(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b or (a and (false -> (pre holds))));

tel;

node triggers(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b and (a or (false -> (pre holds))));

tel;

node responds(
  a : bool;
  b : bool;
  n : int
) returns (
  holds : bool
);
var
  latch : int;
  i : int;
  pre_state : int;
  state : int;
let
  latch = (n -> (pre latch));

  pre_state = (0 -> (pre state));

  state = (if (pre_state = 0) then (if ((not b) or (a and b)) then 0 else 1) else (if (pre_state = 1) then (if ((not a) and (i < latch)) then 1 else (if (a and b) then 1 else (if ((not a) and (i >= latch)) then 2 else 0))) else 2));

  i = (if (pre_state = 0) then 0 else (if (pre_state = 1) then (if (not a) then ((pre i) + 1) else (if (a and b) then 0 else (pre i))) else (pre i)));

  holds = ((state = 0) or (state = 1));

tel;

node precedes(
  a : bool;
  b : bool
) returns (
  holds : bool
);
var
  state : int;
  pre_state : int;
let
  pre_state = (0 -> (pre state));

  state = (if (pre_state = 0) then (if ((a and b) or ((not a) and (not b))) then 0 else (if (a and (not b)) then 1 else 2)) else (if (pre_state = 1) then (if b then 0 else 1) else 2));

  holds = ((state = 0) or (state = 1));

tel;

node count(
  a : bool
) returns (
  c : int
);
let
  c = ((0 -> (pre c)) + (if a then 1 else 0));

tel;

node ccount(
  a : bool
) returns (
  c : int
);
let
  c = (if a then ((0 -> (pre c)) + 1) else 0);

tel;

node btoi(
  a : bool
) returns (
  c : int
);
let
  c = (if a then 1 else 0);

tel;

node USER_ptaas(
  cvg : bool;
  USER_object : USER_penta;
  USER_spex : USER_bit;
  USER_parm : USER_byte;
  USER_position : USER_tuple;
  USER_vector : USER_tuple;
  USER_color : USER_rgb;
  USER_emission : USER_rgb;
  delta_USER_object, delta_USER_spex, delta_USER_parm : real
) returns (
  constraints : bool; ok : bool
);
var
  generated_macro_0 : real;
  generated_macro_1 : real;
  generated_macro_2 : real;
  generated_macro_3 : real;
  generated_macro_4 : real;
  generated_macro_5 : real;
  generated_macro_6 : real;
  generated_macro_7 : real;
  generated_macro_8 : real;
  generated_macro_9 : real;
  generated_macro_10 : real;
  generated_macro_11 : real;
  generated_macro_12 : real;
  generated_macro_13 : real;
  generated_macro_14 : real;
  generated_macro_15 : real;
  generated_macro_16 : real;
  generated_macro_17 : real;
  generated_macro_18 : real;
  generated_macro_19 : real;
  generated_macro_20 : real;
  generated_macro_21 : real;
  generated_macro_22 : real;
  generated_macro_23 : real;
  generated_macro_24 : real;
  generated_macro_25 : real;
  generated_macro_26 : real;
  generated_macro_27 : real;
  generated_macro_28 : real;
  generated_macro_29 : real;
  generated_macro_30 : real;
  generated_macro_31 : real;
  generated_macro_32 : real;
  generated_macro_33 : real;
  generated_macro_34 : real;
  generated_macro_35 : real;
  generated_macro_36 : real;
  generated_macro_37 : real;
  generated_macro_38 : real;
  generated_macro_39 : real;
  generated_macro_40 : real;
  generated_macro_41 : real;
  generated_macro_42 : real;
  generated_macro_43 : real;
  generated_macro_44 : real;
  generated_macro_45 : real;
  generated_macro_46 : real;
  generated_macro_47 : real;
  USER_object_type : bool;
  USER_spex_type : bool;
  USER_parm_type : bool;
  USER_position_x_type : bool;
  USER_position_y_type : bool;
  USER_position_z_type : bool;
  USER_vector_x_type : bool;
  USER_vector_y_type : bool;
  USER_vector_z_type : bool;
  USER_color_r_type : bool;
  USER_color_g_type : bool;
  USER_color_b_type : bool;
  USER_emission_r_type : bool;
  USER_emission_g_type : bool;
  USER_emission_b_type : bool;
  counter : real;
  ok_delta_USER_spex, ok_delta_USER_object, ok_delta_USER_parm, ok_coverage_improved_implies_delta_USER_object, ok_coverage_improved_implies_delta_USER_spex, ok_coverage_improved_implies_delta_USER_parm : bool; 
let
  --%MAIN;
  counter = (1.0 -> ((pre counter) + 1.0));

  generated_macro_0 = USER_position.USER_x;

  generated_macro_1 = USER_position.USER_x;

  generated_macro_2 = USER_position.USER_y;

  generated_macro_3 = USER_position.USER_y;

  generated_macro_4 = USER_position.USER_z;

  generated_macro_5 = USER_position.USER_z;

  generated_macro_6 = USER_vector.USER_x;

  generated_macro_7 = USER_vector.USER_x;

  generated_macro_8 = USER_vector.USER_y;

  generated_macro_9 = USER_vector.USER_y;

  generated_macro_10 = USER_vector.USER_z;

  generated_macro_11 = USER_vector.USER_z;

  generated_macro_12 = USER_color.USER_r;

  generated_macro_13 = USER_color.USER_r;

  generated_macro_14 = USER_color.USER_g;

  generated_macro_15 = USER_color.USER_g;

  generated_macro_16 = USER_color.USER_b;

  generated_macro_17 = USER_color.USER_b;

  generated_macro_18 = USER_emission.USER_r;

  generated_macro_19 = USER_emission.USER_r;

  generated_macro_20 = USER_emission.USER_g;

  generated_macro_21 = USER_emission.USER_g;

  generated_macro_22 = USER_emission.USER_b;

  generated_macro_23 = USER_emission.USER_b;

  generated_macro_24 = USER_position.USER_x;

  generated_macro_25 = USER_position.USER_x;

  generated_macro_26 = USER_position.USER_y;

  generated_macro_27 = USER_position.USER_y;

  generated_macro_28 = USER_position.USER_z;

  generated_macro_29 = USER_position.USER_z;

  generated_macro_30 = USER_vector.USER_x;

  generated_macro_31 = USER_vector.USER_x;

  generated_macro_32 = USER_vector.USER_y;

  generated_macro_33 = USER_vector.USER_y;

  generated_macro_34 = USER_vector.USER_z;

  generated_macro_35 = USER_vector.USER_z;

  generated_macro_36 = USER_color.USER_r;

  generated_macro_37 = USER_color.USER_r;

  generated_macro_38 = USER_color.USER_g;

  generated_macro_39 = USER_color.USER_g;

  generated_macro_40 = USER_color.USER_b;

  generated_macro_41 = USER_color.USER_b;

  generated_macro_42 = USER_emission.USER_r;

  generated_macro_43 = USER_emission.USER_r;

  generated_macro_44 = USER_emission.USER_g;

  generated_macro_45 = USER_emission.USER_g;

  generated_macro_46 = USER_emission.USER_b;

  generated_macro_47 = USER_emission.USER_b;
  ok_delta_USER_object = 0.0 <= delta_USER_object and delta_USER_object <= 1.0;
  ok_coverage_improved_implies_delta_USER_object = ((pre(delta_USER_object) <= 0.1 and not cvg) => USER_object < 0.0) and ((pre(delta_USER_object) >= 0.9 and not cvg) => USER_object > 5.0);

  USER_object_type = (pre(delta_USER_object) > 0.1 and pre(delta_USER_object) < 0.9) => (0.0 <= USER_object and USER_object <= 4.0);

  ok_delta_USER_spex = 0.0 <= delta_USER_spex and delta_USER_spex <= 1.0;
  ok_coverage_improved_implies_delta_USER_spex = ((pre(delta_USER_spex) <= 0.1 and not cvg) => USER_spex < 0.0) and ((pre(delta_USER_spex) >= 0.9 and not cvg) => USER_spex > 2.0);
  USER_spex_type = (pre(delta_USER_spex) > 0.1 and pre(delta_USER_spex) < 0.9) => (0.0 <= USER_spex and USER_spex <= 1.0);

  ok_delta_USER_parm = 0.0 <= delta_USER_parm and delta_USER_parm <= 1.0;
  ok_coverage_improved_implies_delta_USER_parm = ((pre(delta_USER_parm) <= 0.1 and not cvg) => USER_parm < 0.0) and ((pre(delta_USER_parm) >= 0.9 and not cvg) => USER_parm > 255.0);
  USER_parm_type = (pre(delta_USER_parm) > 0.1 and pre(delta_USER_parm) < 0.9) => (0.0 <= USER_parm and USER_parm <= 255.0);

  USER_position_x_type = (((-256.0) <= generated_macro_0) and (generated_macro_1 <= 256.0));

  USER_position_y_type = (((-256.0) <= generated_macro_2) and (generated_macro_3 <= 256.0));

  USER_position_z_type = (((-256.0) <= generated_macro_4) and (generated_macro_5 <= 256.0));

  USER_vector_x_type = (((-256.0) <= generated_macro_6) and (generated_macro_7 <= 256.0));

  USER_vector_y_type = (((-256.0) <= generated_macro_8) and (generated_macro_9 <= 256.0));

  USER_vector_z_type = (((-256.0) <= generated_macro_10) and (generated_macro_11 <= 256.0));

  USER_color_r_type = ((0.0 <= generated_macro_12) and (generated_macro_13 <= 256.0));

  USER_color_g_type = ((0.0 <= generated_macro_14) and (generated_macro_15 <= 256.0));

  USER_color_b_type = ((0.0 <= generated_macro_16) and (generated_macro_17 <= 256.0));

  USER_emission_r_type = ((0.0 <= generated_macro_18) and (generated_macro_19 <= 256.0));

  USER_emission_g_type = ((0.0 <= generated_macro_20) and (generated_macro_21 <= 256.0));

  USER_emission_b_type = ((0.0 <= generated_macro_22) and (generated_macro_23 <= 256.0));

  constraints = historically((USER_object_type and (USER_spex_type and (USER_parm_type and (USER_position_x_type and (USER_position_y_type and (USER_position_z_type and (USER_vector_x_type and (USER_vector_y_type and (USER_vector_z_type and (USER_color_r_type and (USER_color_g_type and (USER_color_b_type and (USER_emission_r_type and (USER_emission_g_type and USER_emission_b_type)))))))))))))));
  
  ok = ok_delta_USER_parm and ok_delta_USER_spex and ok_delta_USER_object and ok_coverage_improved_implies_delta_USER_parm and ok_coverage_improved_implies_delta_USER_spex and ok_coverage_improved_implies_delta_USER_object;

  --%PROPERTY ok;
  --%PROPERTY constraints;

  --%REALIZABLE cvg;

tel;

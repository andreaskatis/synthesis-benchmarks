type FGS__Guidance_Data__Guidance_Data_Impl = struct {cmds : FGS__Guidance_Commands__Guidance_Commands_Impl; mds : FGS__Flight_Modes__Flight_Modes_Impl};
type APS__Control_Surface_Actuator_Data__Control_Surface_Actuator_Data_Impl = struct {CSA_Pitch_Delta : real; CSA_Pitch_Valid : bool};
type FGS__Lateral_Modes__Lateral_Modes_Impl = struct {HDG_active : bool; ROLL_active : bool};
type FGS__Flight_Modes__Flight_Modes_Impl = struct {active : bool; lat : FGS__Lateral_Modes__Lateral_Modes_Impl; ver : int};
type FGS__Guidance_Commands__Guidance_Commands_Impl = struct {Pitch_Delta : real; Pitch_Valid : bool};

node main(
  GC_L : FGS__Guidance_Data__Guidance_Data_Impl;
  GC_R : FGS__Guidance_Data__Guidance_Data_Impl;
  CSA : APS__Control_Surface_Actuator_Data__Control_Surface_Actuator_Data_Impl
) returns (

);
var
  __GUARANTEE0 : bool;
  leader_pitch_delta : real;
  leader_pitch_delta_correct : bool;
let
  --%MAIN;
  __GUARANTEE0 = leader_pitch_delta_correct;

  leader_pitch_delta = (if GC_L.mds.active then GC_L.cmds.Pitch_Delta else (if GC_R.mds.active then GC_R.cmds.Pitch_Delta else (0.0 -> (pre leader_pitch_delta))));

  leader_pitch_delta_correct = (((leader_pitch_delta > 0.0) => ((CSA.CSA_Pitch_Delta > 0.0) and (CSA.CSA_Pitch_Delta <= leader_pitch_delta))) and ((leader_pitch_delta <= 0.0) => ((CSA.CSA_Pitch_Delta <= 0.0) and (CSA.CSA_Pitch_Delta >= leader_pitch_delta))));

  --%PROPERTY __GUARANTEE0;

  --%REALIZABLE GC_L, GC_R;

tel;


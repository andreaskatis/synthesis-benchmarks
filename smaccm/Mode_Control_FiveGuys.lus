node main(
  start : bool;
  clear : bool;
  seconds_to_cook : int;
  door_closed : bool;
  cooking_mode : int
) returns (

);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  is_cooking : bool;
  is_setup : bool;
  is_suspended : bool;
  is_running : bool;
let
  --%MAIN;
  __GUARANTEE0 = ((cooking_mode >= 1) and (cooking_mode <= 3));

  __GUARANTEE1 = (is_cooking => door_closed);

  __GUARANTEE2 = (true => defs__initially_true(is_setup));

  __GUARANTEE3 = ((defs__rising_edge(is_running) and door_closed) => is_cooking);

  __GUARANTEE4 = ((defs__rising_edge(is_running) and (not door_closed)) => is_suspended);

  __GUARANTEE5 = ((defs__rising_edge(clear) and (is_cooking -> (pre is_cooking))) => (not is_cooking));

  __GUARANTEE6 = ((defs__rising_edge(clear) and (is_suspended -> (pre is_suspended))) => is_setup);

  __GUARANTEE7 = ((((defs__rising_edge(start) and is_suspended) and door_closed) and (clear = false)) => is_cooking);

  __GUARANTEE8 = ((seconds_to_cook = 0) => is_setup);

  is_cooking = defs__is_cooking(cooking_mode);

  is_setup = defs__is_setup(cooking_mode);

  is_suspended = defs__is_suspended(cooking_mode);

  is_running = defs__is_running(cooking_mode);

  assert (seconds_to_cook >= 0);

  --%PROPERTY __GUARANTEE0;
  --%PROPERTY __GUARANTEE1;
  --%PROPERTY __GUARANTEE2;
  --%PROPERTY __GUARANTEE3;
  --%PROPERTY __GUARANTEE4;
  --%PROPERTY __GUARANTEE5;
  --%PROPERTY __GUARANTEE6;
  --%PROPERTY __GUARANTEE7;
  --%PROPERTY __GUARANTEE8;

  --%REALIZABLE start, clear, seconds_to_cook, door_closed;

tel;

node defs__initially_true(
  b : bool
) returns (
  result : bool
);
let
  result = (b -> (pre true));

tel;

node defs__rising_edge(
  signal : bool
) returns (
  re : bool
);
let
  re = (signal and (not (false -> (pre signal))));

tel;

node defs__is_cooking(
  m : int
) returns (
  _outvar : bool
);
let
  _outvar = (m = 3);

tel;

node defs__is_setup(
  m : int
) returns (
  _outvar : bool
);
let
  _outvar = (m = 1);

tel;

node defs__is_suspended(
  m : int
) returns (
  _outvar : bool
);
let
  _outvar = (m = 2);

tel;

node defs__is_running(
  m : int
) returns (
  _outvar : bool
);
let
  _outvar = ((m = 3) or (m = 2));

tel;


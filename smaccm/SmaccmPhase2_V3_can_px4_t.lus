type software_types__motors_data__impl = struct {backleft : real; backright : real; frontleft : real; frontright : real};
type software_types__control_law_request__impl = struct {set_armed : bool; set_autothr_src_nav : bool; set_autothr_src_ui : bool; set_disarmed : bool; set_head_src_nav : bool; set_head_src_ui : bool; set_safe : bool; set_stab_src_nav : bool; set_stab_src_ui : bool; set_thr_auto : bool; set_thr_direct : bool; set_ui_mavlink : bool; set_ui_ppm : bool; set_yaw_heading : bool; set_yaw_rate : bool; time : int};
type software_types__controloutput__impl = struct {armed : bool; pitch : real; roll : real; throttle : real; time : int; yaw : real};
type software_types__userinput_result__impl = struct {pitch : real; roll : real; throttle : real; time : int; xsource : int; yaw : real};

node main(
  sensor_data___EVENT_ : bool;
  control_data___EVENT_ : bool;
  control_data : software_types__controloutput__impl;
  motmix_data___EVENT_ : bool;
  motmix_data : software_types__motors_data__impl;
  mission_in___EVENT_ : bool;
  waypoints___EVENT_ : bool;
  mission_out___EVENT_ : bool;
  mav_user_input___EVENT_ : bool;
  mav_user_input : software_types__userinput_result__impl;
  mav_control_law___EVENT_ : bool;
  mav_control_law : software_types__control_law_request__impl;
  nav_control_law___EVENT_ : bool;
  nav_control_law : software_types__control_law_request__impl
) returns (

);
var
  __GUARANTEE0 : bool;
  no_ouput_events : bool;
let
  --%MAIN;
  __GUARANTEE0 = (no_ouput_events -> ((((nav_control_law___EVENT_ or mav_control_law___EVENT_) or mav_user_input___EVENT_) or waypoints___EVENT_) => mission_in___EVENT_));

  no_ouput_events = (((((not nav_control_law___EVENT_) and (not mav_control_law___EVENT_)) and (not mav_user_input___EVENT_)) and (not mission_out___EVENT_)) and (not waypoints___EVENT_));

  --%PROPERTY __GUARANTEE0;

  --%REALIZABLE sensor_data___EVENT_, control_data___EVENT_, control_data, motmix_data___EVENT_, motmix_data, mission_in___EVENT_;

tel;


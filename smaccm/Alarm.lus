type DATATYPES__Config_Outputs__Impl = struct {Config_Mode : int; Config_Timer : int; Configured : int; Drug_Concentration : int; Drug_Name : int; Duration_Intermittent_Bolus : int; Duration_Patient_Bolus : int; Entered_Reservoir_Volume : int; Error_Message_ID : int; Flow_Rate_Basal : int; Flow_Rate_Intermittent_Bolus : int; Flow_Rate_KVO : int; Flow_Rate_Patient_Bolus : int; Infusion_Total_Duration : int; Interval_Intermittent_Bolus : int; Lockout_Period_Patient_Bolus : int; Log_Message_ID : int; Max_Number_of_Patient_Bolus : int; Patient_ID : int; Request_Config_Type : bool; Request_Confirm_Infusion_Initiate : bool; Request_Infusion_Info : bool; Request_Patient_Drug_Info : bool; Reservoir_Volume : int; VTBI_Total : int};
type DATATYPES__Infusion_Manager_Outputs__Impl = struct {Actual_Infusion_Duration : int; Commanded_Flow_Rate : int; Current_System_Mode : int; Log_Message_ID : int; New_Infusion : bool};
type DATATYPES__Drug_Database_Inputs__Impl = struct {Drug_Concentration_High : int; Drug_Concentration_Low : int; Drug_Name : int; Flow_Rate_High : int; Flow_Rate_KVO : int; Flow_Rate_Low : int; Inteval_Patient_Bolus : int; Known_Prescription : bool; Number_Max_Patient_Bolus : int; VTBI_High : int; VTBI_Low : int};
type DATATYPES__Alarm_Outputs__Impl = struct {Audio_Notification_Command : int; Highest_Level_Alarm : int; Is_Audio_Disabled : int; Log_Message_ID : int; Notification_Message : int};
type DATATYPES__Top_Level_Mode_Outputs__Impl = struct {Log_Message_ID : int; Request_Confirm_Stop : bool; System_On : bool};
type DATATYPES__System_Monitor_Output__Impl = struct {System_Monitor_Failed : bool};
type DATATYPES__System_Status_Outputs__Impl = struct {In_Therapy : bool; Log_Message_ID : int; Reservoir_Empty : bool; Reservoir_Volume : int; Volume_Infused : int};
type DATATYPES__Log_Output__Impl = struct {Log : int; Logging_Failed : bool};
type DATATYPES__Device_Sensor_Inputs__Impl = struct {Air_In_Line : bool; Air_Pressure : bool; Battery_Depleted : bool; Battery_Low : bool; Battery_Unable_To_Charge : bool; CPU_Error : bool; Door_Open : bool; Flow_Rate : int; Flow_Rate_Not_Stable : bool; Humidity : bool; Log : bool; Memory_Corrupted : bool; Occlusion : bool; Post_Successful : bool; Pump_Overheated : bool; Pump_Primed : bool; Pump_Too_Hot : bool; RTC_Error : bool; Supply_Voltage : bool; Temp : bool; WatchDog_Interrupt_Detected : bool};
type DATATYPES__Device_Configuration_Inputs__Impl = struct {Audio_Enable_Duration : int; Audio_Level : int; Config_Warning_Duration : int; Empty_Reservoir : int; Log_Interval : int; Low_Reservoir : int; Max_Config_Duration : int; Max_Confirm_Stop_Duration : int; Max_Display_Duration : int; Max_Duration_Over_Infusion : int; Max_Duration_Under_Infusion : int; Max_Idle_Duration : int; Max_Paused_Duration : int; System_Test_Inteval : int; Tolerance_Max : int; Tolerance_Min : int};
type DATATYPES__Operator_Commands__Impl = struct {Back : bool; Cancel : bool; Configuration_Type : int; Confirm_Stop : bool; Data_Config : bool; Disable_Audio : int; Infusion_Cancel : bool; Infusion_Inhibit : bool; Infusion_Initiate : bool; Keyboard : bool; Next : bool; Notification_Cancel : bool; System_Start : bool; System_Stop : bool};

node main(
  IM_IN : DATATYPES__Infusion_Manager_Outputs__Impl;
  TLM_MODE_IN : DATATYPES__Top_Level_Mode_Outputs__Impl;
  SYS_MON_IN : DATATYPES__System_Monitor_Output__Impl;
  LOGGING_IN : DATATYPES__Log_Output__Impl;
  OP_CMD_IN : DATATYPES__Operator_Commands__Impl;
  DB_IN : DATATYPES__Drug_Database_Inputs__Impl;
  SENSOR_IN : DATATYPES__Device_Sensor_Inputs__Impl;
  CONST_IN : DATATYPES__Device_Configuration_Inputs__Impl;
  SYS_STAT_IN : DATATYPES__System_Status_Outputs__Impl;
  CONFIG_IN : DATATYPES__Config_Outputs__Impl;
  ALARM_OUT : DATATYPES__Alarm_Outputs__Impl
) returns (

);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
  __GUARANTEE10 : bool;
  __GUARANTEE11 : bool;
  __GUARANTEE12 : bool;
  volume_infused : bool;
  alarm_range : bool;
  empty_reservoir_implies_alarm_L4 : bool;
  low_reservoir_implies_alarm_L2 : bool;
  air_in_line_implies_grt_L3_alarm : bool;
  occlusion_implies_grt_L3_alarm : bool;
  door_open_implies_grt_L3_alarm : bool;
  alarm_gte_L3_causes_audio_output_EQ_audio_level : bool;
  no_audio_if_audio_disabled : bool;
  other_level_4_alarms : bool;
  flow_rate_exceeds_flow_rate_Hi : bool;
  alarm_gt_3_no_audio_disable_implies_audio : bool;
  empty_reservoir_implies_visual_1 : bool;
let
  --%MAIN;
  __GUARANTEE0 = volume_infused;

  __GUARANTEE1 = alarm_range;

  __GUARANTEE2 = empty_reservoir_implies_alarm_L4;

  __GUARANTEE3 = low_reservoir_implies_alarm_L2;

  __GUARANTEE4 = air_in_line_implies_grt_L3_alarm;

  __GUARANTEE5 = occlusion_implies_grt_L3_alarm;

  __GUARANTEE6 = door_open_implies_grt_L3_alarm;

  __GUARANTEE7 = alarm_gte_L3_causes_audio_output_EQ_audio_level;

  __GUARANTEE8 = no_audio_if_audio_disabled;

  __GUARANTEE9 = other_level_4_alarms;

  __GUARANTEE10 = flow_rate_exceeds_flow_rate_Hi;

  __GUARANTEE11 = alarm_gt_3_no_audio_disable_implies_audio;

  __GUARANTEE12 = empty_reservoir_implies_visual_1;

  volume_infused = (((TLM_MODE_IN.System_On and SYS_STAT_IN.In_Therapy) and (SYS_STAT_IN.Volume_Infused > DB_IN.VTBI_High)) => (ALARM_OUT.Highest_Level_Alarm >= 3));

  alarm_range = ((((ALARM_OUT.Highest_Level_Alarm = 1) or (ALARM_OUT.Highest_Level_Alarm = 2)) or (ALARM_OUT.Highest_Level_Alarm = 3)) or (ALARM_OUT.Highest_Level_Alarm = 4));

  empty_reservoir_implies_alarm_L4 = (((TLM_MODE_IN.System_On and SYS_STAT_IN.In_Therapy) and SYS_STAT_IN.Reservoir_Empty) => (ALARM_OUT.Highest_Level_Alarm = 4));

  low_reservoir_implies_alarm_L2 = (((TLM_MODE_IN.System_On and SYS_STAT_IN.In_Therapy) and (SYS_STAT_IN.Reservoir_Volume < CONST_IN.Low_Reservoir)) => (ALARM_OUT.Highest_Level_Alarm >= 2));

  air_in_line_implies_grt_L3_alarm = ((TLM_MODE_IN.System_On and SENSOR_IN.Air_In_Line) => (ALARM_OUT.Highest_Level_Alarm >= 3));

  occlusion_implies_grt_L3_alarm = ((TLM_MODE_IN.System_On and SENSOR_IN.Occlusion) => (ALARM_OUT.Highest_Level_Alarm >= 3));

  door_open_implies_grt_L3_alarm = ((TLM_MODE_IN.System_On and SENSOR_IN.Door_Open) => (ALARM_OUT.Highest_Level_Alarm >= 3));

  alarm_gte_L3_causes_audio_output_EQ_audio_level = (((TLM_MODE_IN.System_On and (ALARM_OUT.Highest_Level_Alarm >= 3)) and (OP_CMD_IN.Disable_Audio = 0)) => ((ALARM_OUT.Audio_Notification_Command = CONST_IN.Audio_Level) and (ALARM_OUT.Is_Audio_Disabled = 0)));

  no_audio_if_audio_disabled = ((TLM_MODE_IN.System_On and (OP_CMD_IN.Disable_Audio > 0)) => ((ALARM_OUT.Audio_Notification_Command = 0) and (ALARM_OUT.Is_Audio_Disabled = OP_CMD_IN.Disable_Audio)));

  other_level_4_alarms = ((TLM_MODE_IN.System_On and (((((SENSOR_IN.Battery_Depleted or SENSOR_IN.RTC_Error) or SENSOR_IN.CPU_Error) or SENSOR_IN.Memory_Corrupted) or SENSOR_IN.Pump_Too_Hot) or SENSOR_IN.WatchDog_Interrupt_Detected)) => (ALARM_OUT.Highest_Level_Alarm = 4));

  flow_rate_exceeds_flow_rate_Hi = (true -> (((TLM_MODE_IN.System_On and SYS_STAT_IN.In_Therapy) and (SENSOR_IN.Flow_Rate > DB_IN.Flow_Rate_High)) => (ALARM_OUT.Highest_Level_Alarm >= 3)));

  alarm_gt_3_no_audio_disable_implies_audio = (true -> (((TLM_MODE_IN.System_On and (ALARM_OUT.Highest_Level_Alarm >= 3)) and (OP_CMD_IN.Disable_Audio = 0)) => ((ALARM_OUT.Audio_Notification_Command = CONST_IN.Audio_Level) and (ALARM_OUT.Is_Audio_Disabled = OP_CMD_IN.Disable_Audio))));

  empty_reservoir_implies_visual_1 = (true -> (((TLM_MODE_IN.System_On and SYS_STAT_IN.In_Therapy) and SYS_STAT_IN.Reservoir_Empty) => (ALARM_OUT.Notification_Message = 1)));

  --%PROPERTY __GUARANTEE0;
  --%PROPERTY __GUARANTEE1;
  --%PROPERTY __GUARANTEE2;
  --%PROPERTY __GUARANTEE3;
  --%PROPERTY __GUARANTEE4;
  --%PROPERTY __GUARANTEE5;
  --%PROPERTY __GUARANTEE6;
  --%PROPERTY __GUARANTEE7;
  --%PROPERTY __GUARANTEE8;
  --%PROPERTY __GUARANTEE9;
  --%PROPERTY __GUARANTEE10;
  --%PROPERTY __GUARANTEE11;
  --%PROPERTY __GUARANTEE12;

  --%REALIZABLE IM_IN, TLM_MODE_IN, SYS_MON_IN, LOGGING_IN, OP_CMD_IN, DB_IN, SENSOR_IN, CONST_IN, SYS_STAT_IN, CONFIG_IN;

tel;


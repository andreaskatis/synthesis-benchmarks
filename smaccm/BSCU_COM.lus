type BSCU__PanelMsg__PanelMsgImpl = struct {LO : bool; MAX : bool; MED : bool};

node main(
  Panel : BSCU__PanelMsg__PanelMsgImpl;
  Pedal : int;
  Fail : bool;
  CMD : int
) returns (

);
var
  __GUARANTEE0 : bool;
  Mode : int;
let
  --%MAIN;
  __GUARANTEE0 = ((not Fail) => (CMD = Agree_Nodes__Brake_Cmd(Mode, Pedal)));

  Mode = Agree_Nodes__Brake_Mode(pre(Mode), Panel.LO, Panel.MED, Panel.MAX);

  --%PROPERTY __GUARANTEE0;

  --%REALIZABLE Panel, Pedal, Fail;

tel;

node Agree_Nodes__Brake_Cmd(
  mode : int;
  pedal : int
) returns (
  r : int
);
let
  r = (if (mode = 2) then 170 else (if (mode = 3) then 340 else (if (mode = 4) then 510 else pedal)));

tel;

node Agree_Nodes__Rise(
  p : bool
) returns (
  r : bool
);
let
  r = (false -> ((not (pre p)) and p));

tel;

node Agree_Nodes__Brake_Mode(
  mode : int;
  lo : bool;
  med : bool;
  max : bool
) returns (
  r : int
);
let
  r = (1 -> (if (((pre mode) = 2) and Agree_Nodes__Rise(lo)) then 1 else (if (((pre mode) = 3) and Agree_Nodes__Rise(med)) then 1 else (if (((pre mode) = 4) and Agree_Nodes__Rise(max)) then 1 else (if (((pre mode) <> 2) and Agree_Nodes__Rise(lo)) then 2 else (if (((pre mode) <> 3) and Agree_Nodes__Rise(med)) then 3 else (if (((pre mode) <> 4) and Agree_Nodes__Rise(max)) then 4 else (pre mode))))))));

tel;

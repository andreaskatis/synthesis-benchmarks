type direction = enum {N, S, E, W};

node abs(x : real) returns (y : real);
let
  y = if (x < 0.0) then -x else x;
tel;

node Initially(exp : bool) returns (iexp : bool);
let
 iexp = exp -> true;
tel;

node bounded_evasion(adv_x, adv_y, rbt_x, rbt_y : real; dir : direction) returns ();
var
 ok1, ok2, ok3, ok4, ok5, ok6 : bool;
let
 assert Initially(adv_x = 0.8 and adv_y = 0.8);
 assert (adv_x >= 0.0 and adv_x <= 1.0 and adv_y >= 0.0 and adv_y <= 1.0);
 assert (adv_x >= pre(adv_x) - 0.1 or adv_x = pre(adv_x) or adv_x <= pre(adv_x) + 0.1);
 assert (adv_y >= pre(adv_y) - 0.1 or adv_y = pre(adv_y) or adv_y <= pre(adv_y) + 0.1);


 ok1 = Initially(rbt_x = 0.5 and rbt_y = 0.5);
 ok2 = rbt_x >= 0.0 and rbt_x <= 1.0;
 ok3 = rbt_y >= 0.0 and rbt_y <= 1.0;
 ok4 = not (rbt_x = adv_x and rbt_y = adv_y);

 ok5 = true -> (if (dir = N) then (rbt_x = pre(rbt_x) and rbt_y = pre(rbt_y) + 0.1)
 		else (if (dir = S) then (rbt_x = pre(rbt_x) and rbt_y = pre(rbt_y - 0.1))
 			else (if (dir = E) then (rbt_x = pre(rbt_x) + 0.1 and rbt_y = pre(rbt_y))
 				else (rbt_x = pre(rbt_x) - 0.1 and rbt_y = pre(rbt_y)))));
 --smoothing props
 ok6 = true -> ((pre(dir = N and rbt_y < 1.0) => dir <> S) and (pre(dir = S and rbt_y > 0.0) => dir <> N) and (pre(dir = E and rbt_x < 1.0) => dir <> W) and (pre(dir = W and rbt_x > 0.0) => dir <> E));

 --%PROPERTY ok1;
 --%PROPERTY ok2;
 --%PROPERTY ok3;
 --%PROPERTY ok4;
 --%PROPERTY ok5;
 --%PROPERTY ok6;
 --%REALIZABLE adv_x, adv_y;
tel;
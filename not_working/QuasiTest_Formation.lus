node main(
  left_shift : bool;
  right_shift : bool;
  leader : int;
  right : int;
  left : int;
  pend_leader : int;
  pend_right : int;
  pend_left : int
) returns (

);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
  __GUARANTEE10 : bool;
  __GUARANTEE11 : bool;
  __GUARANTEE12 : bool;
  __GUARANTEE13 : bool;
  __GUARANTEE14 : bool;
  __GUARANTEE15 : bool;
  __GUARANTEE16 : bool;
  __GUARANTEE17 : bool;
  last_shift_left : bool;
  last_shift_right : bool;
  pending : bool;
  left_shift_time : int;
  right_shift_time : int;
let
  --%MAIN;
  __GUARANTEE0 = ((leader >= 0) and (leader <= 3));

  __GUARANTEE1 = ((right >= 0) and (right <= 3));

  __GUARANTEE2 = ((left >= 0) and (left <= 3));

  __GUARANTEE3 = ((pend_leader >= 0) and (pend_leader <= 3));

  __GUARANTEE4 = ((pend_right >= 0) and (pend_right <= 3));

  __GUARANTEE5 = ((pend_left >= 0) and (pend_left <= 3));

  __GUARANTEE6 = ((((pend_leader <> 3) => ((pend_leader <> pend_right) and (pend_leader <> pend_left))) and ((pend_right <> 3) => ((pend_leader <> pend_right) and (pend_right <> pend_left)))) and ((pend_left <> 3) => ((pend_leader <> pend_left) and (pend_right <> pend_left))));

  __GUARANTEE7 = ((((leader <> 3) => ((leader <> right) and (leader <> left))) and ((right <> 3) => ((right <> leader) and (right <> left)))) and ((left <> 3) => ((left <> leader) and (left <> right))));

  __GUARANTEE8 = ((((((((leader = 0) or (right = 0)) or (left = 0)) or (pend_leader = 0)) or (pend_right = 0)) or (pend_left = 0)) and ((((((leader = 1) or (right = 1)) or (left = 1)) or (pend_leader = 1)) or (pend_right = 1)) or (pend_left = 1))) and ((((((leader = 2) or (right = 2)) or (left = 2)) or (pend_leader = 2)) or (pend_right = 2)) or (pend_left = 2)));

  __GUARANTEE9 = (true -> (((pre pend_right) <> 3) => (((pre pend_right) <> pend_right) => (right = (pre pend_right)))));

  __GUARANTEE10 = (true -> (((pre pend_left) <> 3) => (((pre pend_left) <> pend_left) => (left = (pre pend_left)))));

  __GUARANTEE11 = (true -> (((pre pend_leader) <> 3) => (((pre pend_leader) <> pend_leader) => (leader = (pre pend_leader)))));

  __GUARANTEE12 = (true -> ((leader <> (pre leader)) => (((pre leader) = 3) or (leader = 3))));

  __GUARANTEE13 = (true -> ((right <> (pre right)) => (((pre right) = 3) or (right = 3))));

  __GUARANTEE14 = (true -> ((left <> (pre left)) => (((pre left) = 3) or (left = 3))));

  __GUARANTEE15 = (true -> (((((pend_right = (pre leader)) and (pend_right <> 3)) => last_shift_right) and (((pend_left = (pre right)) and (pend_left <> 3)) => last_shift_right)) and (((pend_leader = (pre left)) and (pend_leader <> 3)) => last_shift_right)));

  __GUARANTEE16 = (true -> (((((pend_right = (pre left)) and (pend_right <> 3)) => last_shift_left) and (((pend_left = (pre leader)) and (pend_left <> 3)) => last_shift_left)) and (((pend_leader = (pre right)) and (pend_leader <> 3)) => last_shift_left)));

  __GUARANTEE17 = (true -> (((not (pre pending)) and (not (left_shift or right_shift))) => (not pending)));

  last_shift_left = (false -> (Defs__rising(left_shift) or ((pre last_shift_left) and (not Defs__rising(right_shift)))));

  last_shift_right = (false -> (Defs__rising(right_shift) or ((pre last_shift_right) and (not Defs__rising(left_shift)))));

  pending = (((leader = 3) or (right = 3)) or (left = 3));

  left_shift_time = Defs__high_for(left_shift);

  right_shift_time = Defs__high_for(right_shift);

  assert (not (left_shift and right_shift));

  assert (true -> ((Defs__rising(left_shift) or Defs__rising(right_shift)) => (not (pre pending))));

  assert (true -> ((pre ((0 < left_shift_time) and (left_shift_time < 3))) => left_shift));

  assert (true -> ((pre ((0 < right_shift_time) and (right_shift_time < 3))) => right_shift));

  --%PROPERTY __GUARANTEE0;
  --%PROPERTY __GUARANTEE1;
  --%PROPERTY __GUARANTEE2;
  --%PROPERTY __GUARANTEE3;
  --%PROPERTY __GUARANTEE4;
  --%PROPERTY __GUARANTEE5;
  --%PROPERTY __GUARANTEE6;
  --%PROPERTY __GUARANTEE7;
  --%PROPERTY __GUARANTEE8;
  --%PROPERTY __GUARANTEE9;
  --%PROPERTY __GUARANTEE10;
  --%PROPERTY __GUARANTEE11;
  --%PROPERTY __GUARANTEE12;
  --%PROPERTY __GUARANTEE13;
  --%PROPERTY __GUARANTEE14;
  --%PROPERTY __GUARANTEE15;
  --%PROPERTY __GUARANTEE16;
  --%PROPERTY __GUARANTEE17;

  --%REALIZABLE left_shift, right_shift;

tel;

node Defs__rising(
  signal : bool
) returns (
  result : bool
);
let
  result = (false -> ((pre (not signal)) and signal));

tel;

node Defs__high_for(
  signal : bool
) returns (
  result : int
);
let
  result = (if signal then (1 -> ((pre result) + 1)) else 0);

tel;


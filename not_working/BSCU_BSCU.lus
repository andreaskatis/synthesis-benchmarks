--CONTAINS ASSERTIONS OVER LOCALS
--FIXPOINT leads to false antecedent.
type BSCU__ChannelStatus__ChannelStatusImpl = struct {Active : bool; Cmd : int; Error : bool};
type BSCU__PanelMsg__PanelMsgImpl = struct {LO : bool; MAX : bool; MED : bool};

node main(
  Panel : BSCU__PanelMsg__PanelMsgImpl;
  Pedal : int;
  FailCOM1 : bool;
  FailMON1 : bool;
  FailCOM2 : bool;
  FailMON2 : bool;
  Initializing : bool;
  CH1 : BSCU__ChannelStatus__ChannelStatusImpl;
  CH2 : BSCU__ChannelStatus__ChannelStatusImpl
) returns (

);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  COM1Failed : bool;
  COM2Failed : bool;
  MON1Failed : bool;
  MON2Failed : bool;
  No_Failed_Component : bool;
  At_Most_One_Failed_Component : bool;
let
  --%MAIN;
  __GUARANTEE0 = (No_Failed_Component => ((not Initializing) => ((not CH1.Error) or (not CH2.Error))));

  __GUARANTEE1 = (At_Most_One_Failed_Component => ((not Initializing) => ((not CH1.Error) or (not CH2.Error))));

  __GUARANTEE2 = (No_Failed_Component => ((not Initializing) => (CH1.Active or CH2.Active)));

  __GUARANTEE3 = (At_Most_One_Failed_Component => (Agree_Nodes__Duration(((not Initializing) and (not (CH1.Active or CH2.Active)))) < 7));

  __GUARANTEE4 = (No_Failed_Component => (Agree_Nodes__Duration((((not Initializing) and CH1.Active) and CH2.Active)) < 7));

  __GUARANTEE5 = (At_Most_One_Failed_Component => (Agree_Nodes__Duration((((not Initializing) and CH1.Active) and CH2.Active)) < 7));

  COM1Failed = Agree_Nodes__Latch(FailCOM1);

  COM2Failed = Agree_Nodes__Latch(FailCOM2);

  MON1Failed = Agree_Nodes__Latch(FailMON1);

  MON2Failed = Agree_Nodes__Latch(FailMON2);

  No_Failed_Component = (not (((COM1Failed or COM2Failed) or MON1Failed) or MON2Failed));

  At_Most_One_Failed_Component = ((((COM1Failed => (not ((COM2Failed or MON1Failed) or MON2Failed))) and (COM2Failed => (not ((COM1Failed or MON1Failed) or MON2Failed)))) and (MON1Failed => (not ((COM1Failed or COM2Failed) or MON2Failed)))) and (MON2Failed => (not ((COM1Failed or COM2Failed) or MON1Failed))));

  assert At_Most_One_Failed_Component;

  assert (Pedal = 100);

  assert (((Panel.LO => (not (Panel.MED or Panel.MAX))) and (Panel.MED => (not (Panel.LO or Panel.MAX)))) and (Panel.MAX => (not (Panel.LO or Panel.MED))));

  assert ((Agree_Nodes__True_At_Least(Panel.LO, 13) and Agree_Nodes__True_At_Least(Panel.MED, 13)) and Agree_Nodes__True_At_Least(Panel.MAX, 13));

  assert ((Agree_Nodes__True_At_Most(Panel.LO, 20) and Agree_Nodes__True_At_Most(Panel.MED, 20)) and Agree_Nodes__True_At_Most(Panel.MAX, 20));

  assert ((Agree_Nodes__True_At_Least((not Panel.LO), 13) and Agree_Nodes__True_At_Least((not Panel.MED), 13)) and Agree_Nodes__True_At_Least((not Panel.MAX), 13));

  --%PROPERTY __GUARANTEE0;
  --%PROPERTY __GUARANTEE1;
  --%PROPERTY __GUARANTEE2;
  --%PROPERTY __GUARANTEE3;
  --%PROPERTY __GUARANTEE4;
  --%PROPERTY __GUARANTEE5;

  --%REALIZABLE Panel, Pedal, FailCOM1, FailMON1, FailCOM2, FailMON2;

tel;

node Agree_Nodes__b2i(
  b : bool
) returns (
  i : int
);
let
  i = (if b then 1 else 0);

tel;

node Agree_Nodes__True_At_Least(
  p : bool;
  n : int
) returns (
  r : bool
);
var
  c : int;
  __nodeLemma0 : bool;
let
  c = (Agree_Nodes__b2i(p) -> (if p then ((pre c) + 1) else 0));

  r = (true -> ((((pre c) > 0) and ((pre c) < n)) => p));

  __nodeLemma0 = (c >= 0);

  --%PROPERTY __nodeLemma0;

tel;

node Agree_Nodes__True_At_Most(
  p : bool;
  n : int
) returns (
  r : bool
);
var
  c : int;
  __nodeLemma0 : bool;
let
  c = (Agree_Nodes__b2i(p) -> (if p then ((pre c) + 1) else 0));

  r = (true -> (((pre c) = n) => (not p)));

  __nodeLemma0 = (c >= 0);

  --%PROPERTY __nodeLemma0;

tel;

node Agree_Nodes__Duration(
  p : bool
) returns (
  c : int
);
var
  __nodeLemma0 : bool;
let
  c = (Agree_Nodes__b2i(p) -> (if p then ((pre c) + 1) else 0));

  __nodeLemma0 = (c >= 0);

  --%PROPERTY __nodeLemma0;

tel;

node Agree_Nodes__Latch(
  p : bool
) returns (
  r : bool
);
let
  r = (p -> (p or (pre r)));

tel;

type DATA_TYPES__EGI__treal = struct {ALT : real; AOA : real; FPACCEL : real; GAMLNS : real; GS : real; HDD : real; HDOT : real; LAT : real; LON : real; NX : real; NY : real; NZ : real; PB : real; PHI : real; PSI : real; Pres : real; QB : real; RB : real; TAT : real; THETA : real; TIME_STAMP : int; Temp : real; TotPres : real; VE : real; VGOT : real; VN : real; XTACC : real};
type DATA_TYPES__Spoilers__tbool = struct {SPLIB : bool; SPLOB : bool; SPRIB : bool; SPROB : bool};
type DATA_TYPES__QUAD_Stabilizer__treal = struct {STAB1 : DATA_TYPES__Stabilizer__treal; STAB2 : DATA_TYPES__Stabilizer__treal; STAB3 : DATA_TYPES__Stabilizer__treal; STAB4 : DATA_TYPES__Stabilizer__treal};
type DATA_TYPES__AoA__tbool = struct {AOA : bool};
type DATA_TYPES__QUAD_Flaps__tbool = struct {FLAPS1 : DATA_TYPES__Flaps__tbool; FLAPS2 : DATA_TYPES__Flaps__tbool; FLAPS3 : DATA_TYPES__Flaps__tbool; FLAPS4 : DATA_TYPES__Flaps__tbool};
type DATA_TYPES__AoA__treal = struct {AOA : real; TIME_STAMP : int};
type DATA_TYPES__DUAL_AirData__treal = struct {AD1 : DATA_TYPES__AirData__treal; AD2 : DATA_TYPES__AirData__treal};
type DATA_TYPES__QUAD_Ailerons__tbool = struct {AIL1 : DATA_TYPES__Ailerons__tbool; AIL2 : DATA_TYPES__Ailerons__tbool; AIL3 : DATA_TYPES__Ailerons__tbool; AIL4 : DATA_TYPES__Ailerons__tbool};
type DATA_TYPES__DUAL_AoA__treal = struct {AOA1 : DATA_TYPES__AoA__treal; AOA2 : DATA_TYPES__AoA__treal};
type DATA_TYPES__Rudders__treal = struct {RUDL : real; RUDU : real; TIME_STAMP : int};
type DATA_TYPES__Flaps__tbool = struct {FLLIB : bool; FLLOB : bool; FLRIB : bool; FLROB : bool};
type DATA_TYPES__Actuators__impl = struct {AILL : real; AILR : real; BRAKE : real; ELLIB : real; ELLOB : real; ELRIB : real; ELROB : real; FLAPLI : real; FLAPLO : real; FLAPRI : real; FLAPRO : real; GEAR : real; RUDLO : real; RUDUP : real; SPLLIB : real; SPLLOB : real; SPLRIB : real; SPLROB : real; STEER : real; THROTL : real; THROTR : real};
type DATA_TYPES__QUAD_EGI__tbool = struct {egi1 : DATA_TYPES__EGI__tbool; egi2 : DATA_TYPES__EGI__tbool; egi3 : DATA_TYPES__EGI__tbool; egi4 : DATA_TYPES__EGI__tbool};
type DATA_TYPES__QUAD_Spoilers__tbool = struct {SPOIL1 : DATA_TYPES__Spoilers__tbool; SPOIL2 : DATA_TYPES__Spoilers__tbool; SPOIL3 : DATA_TYPES__Spoilers__tbool; SPOIL4 : DATA_TYPES__Spoilers__tbool};
type DATA_TYPES__QUAD_EGI__treal = struct {egi1 : DATA_TYPES__EGI__treal; egi2 : DATA_TYPES__EGI__treal; egi3 : DATA_TYPES__EGI__treal; egi4 : DATA_TYPES__EGI__treal};
type DATA_TYPES__QUAD_Spoilers__treal = struct {SPOIL1 : DATA_TYPES__Spoilers__treal; SPOIL2 : DATA_TYPES__Spoilers__treal; SPOIL3 : DATA_TYPES__Spoilers__treal; SPOIL4 : DATA_TYPES__Spoilers__treal};
type DATA_TYPES__EGI__tbool = struct {ALT : bool; AOA : bool; FPACCEL : bool; GAMLNS : bool; GS : bool; HDD : bool; HDOT : bool; LAT : bool; LON : bool; NX : bool; NY : bool; NZ : bool; PB : bool; PHI : bool; PSI : bool; Pres : bool; QB : bool; RB : bool; TAT : bool; THETA : bool; Temp : bool; TotPres : bool; VE : bool; VGOT : bool; VN : bool; XTACC : bool};
type DATA_TYPES__Elevators__treal = struct {ELLIB : real; ELLOB : real; ELRIB : real; ELROB : real; TIME_STAMP : int};
type DATA_TYPES__NumActuators__impl = struct {AILL : int; AILR : int; BRAKE : int; ELLIB : int; ELLOB : int; ELRIB : int; ELROB : int; FLAPLI : int; FLAPLO : int; FLAPRI : int; FLAPRO : int; GEAR : int; RUDLO : int; RUDUP : int; SPLLIB : int; SPLLOB : int; SPLRIB : int; SPLROB : int; STEER : int; THROTL : int; THROTR : int};
type DATA_TYPES__BoolActuators__impl = struct {AILL : bool; AILR : bool; BRAKE : bool; ELLIB : bool; ELLOB : bool; ELRIB : bool; ELROB : bool; FLAPLI : bool; FLAPLO : bool; FLAPRI : bool; FLAPRO : bool; GEAR : bool; RUDLO : bool; RUDUP : bool; SPLLIB : bool; SPLLOB : bool; SPLRIB : bool; SPLROB : bool; STEER : bool; THROTL : bool; THROTR : bool};
type DATA_TYPES__AirData__tbool = struct {Pres : bool; TAT : bool; Temp : bool; TotPres : bool};
type DATA_TYPES__Rudders__tbool = struct {RUDL : bool; RUDU : bool};
type DATA_TYPES__DUAL_AoA__tbool = struct {AOA1 : DATA_TYPES__AoA__tbool; AOA2 : DATA_TYPES__AoA__tbool};
type DATA_TYPES__DUAL_AirData__tbool = struct {AD1 : DATA_TYPES__AirData__tbool; AD2 : DATA_TYPES__AirData__tbool};
type DATA_TYPES__Ailerons__treal = struct {AILL : real; AILR : real; TIME_STAMP : int};
type DATA_TYPES__Flaps__treal = struct {FLLIB : real; FLLOB : real; FLRIB : real; FLROB : real; TIME_STAMP : int};
type DATA_TYPES__Spoilers__treal = struct {SPLIB : real; SPLOB : real; SPRIB : real; SPROB : real; TIME_STAMP : int};
type DATA_TYPES__QUAD_Ailerons__treal = struct {AIL1 : DATA_TYPES__Ailerons__treal; AIL2 : DATA_TYPES__Ailerons__treal; AIL3 : DATA_TYPES__Ailerons__treal; AIL4 : DATA_TYPES__Ailerons__treal};
type DATA_TYPES__QUAD_Elevators__tbool = struct {EL1 : DATA_TYPES__Elevators__tbool; EL2 : DATA_TYPES__Elevators__tbool; EL3 : DATA_TYPES__Elevators__tbool; EL4 : DATA_TYPES__Elevators__tbool};
type DATA_TYPES__QUAD_Elevators__treal = struct {EL1 : DATA_TYPES__Elevators__treal; EL2 : DATA_TYPES__Elevators__treal; EL3 : DATA_TYPES__Elevators__treal; EL4 : DATA_TYPES__Elevators__treal};
type DATA_TYPES__QUAD_Flaps__treal = struct {FLAPS1 : DATA_TYPES__Flaps__treal; FLAPS2 : DATA_TYPES__Flaps__treal; FLAPS3 : DATA_TYPES__Flaps__treal; FLAPS4 : DATA_TYPES__Flaps__treal};
type DATA_TYPES__AirData__treal = struct {Pres : real; TAT : real; TIME_STAMP : int; Temp : real; TotPres : real};
type DATA_TYPES__QUAD_Stabilizer__tbool = struct {STAB1 : bool; STAB2 : bool; STAB3 : bool; STAB4 : bool};
type DATA_TYPES__Elevators__tbool = struct {ELLIB : bool; ELLOB : bool; ELRIB : bool; ELROB : bool};
type DATA_TYPES__QUAD_Rudders__treal = struct {RUDD1 : DATA_TYPES__Rudders__treal; RUDD2 : DATA_TYPES__Rudders__treal; RUDD3 : DATA_TYPES__Rudders__treal; RUDD4 : DATA_TYPES__Rudders__treal};
type DATA_TYPES__Stabilizer__treal = struct {TIME_STAMP : int; VAL : real};
type DATA_TYPES__QUAD_Rudders__tbool = struct {RUDD1 : DATA_TYPES__Rudders__tbool; RUDD2 : DATA_TYPES__Rudders__tbool; RUDD3 : DATA_TYPES__Rudders__tbool; RUDD4 : DATA_TYPES__Rudders__tbool};
type DATA_TYPES__Ailerons__tbool = struct {AILL : bool; AILR : bool};

node main(
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  egi : DATA_TYPES__QUAD_EGI__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  acts_ret : DATA_TYPES__Actuators__impl;
  num_valid_acts : DATA_TYPES__NumActuators__impl;
  claw_acts : DATA_TYPES__Actuators__impl;
  osas_failure : bool;
  elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  elevators_select : DATA_TYPES__Elevators__treal;
  ailerons_select : DATA_TYPES__Ailerons__treal;
  rudders_select : DATA_TYPES__Rudders__treal;
  flaps_select : DATA_TYPES__Flaps__treal;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal;
  egi_select : DATA_TYPES__EGI__treal;
  spoilers_select : DATA_TYPES__Spoilers__treal;
  stabilizers_select : DATA_TYPES__Stabilizer__treal;
  acts_fail : DATA_TYPES__BoolActuators__impl;
  acts_out : DATA_TYPES__Actuators__impl;
  sovs1 : DATA_TYPES__BoolActuators__impl;
  sovs2 : DATA_TYPES__BoolActuators__impl
) returns (

);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
let
  --%MAIN;
  __GUARANTEE0 = FCC_RC5__req_els(elevators_faults, elevators_select);

  __GUARANTEE1 = FCC_RC5__req_ails(ailerons_faults, ailerons_select);

  __GUARANTEE2 = FCC_RC5__req_flaps(flaps_faults, flaps_select);

  __GUARANTEE3 = FCC_RC5__req_rud(rudders_faults, rudders_select);

  __GUARANTEE4 = FCC_RC5__req_spoil(spoilers_faults, spoilers_select);

  __GUARANTEE5 = FCC_RC5__req_stab(stabilizers_faults, stabilizers_select);

  __GUARANTEE6 = FCC_RC_2__req(acts_out, num_valid_acts);

  __GUARANTEE7 = OSAS_S_140__req(acts_out, acts_fail);

  __GUARANTEE8 = (true -> (((((((((((((((((((((pre acts_fail.THROTL) => acts_fail.THROTL) and ((pre acts_fail.THROTR) => acts_fail.THROTR)) and ((pre acts_fail.ELLOB) => acts_fail.ELLOB)) and ((pre acts_fail.ELLIB) => acts_fail.ELLIB)) and ((pre acts_fail.ELROB) => acts_fail.ELROB)) and ((pre acts_fail.ELRIB) => acts_fail.ELRIB)) and ((pre acts_fail.AILL) => acts_fail.AILL)) and ((pre acts_fail.AILR) => acts_fail.AILR)) and ((pre acts_fail.RUDUP) => acts_fail.RUDUP)) and ((pre acts_fail.RUDLO) => acts_fail.RUDLO)) and ((pre acts_fail.SPLLOB) => acts_fail.SPLLOB)) and ((pre acts_fail.SPLLIB) => acts_fail.SPLLIB)) and ((pre acts_fail.SPLROB) => acts_fail.SPLROB)) and ((pre acts_fail.SPLRIB) => acts_fail.SPLRIB)) and ((pre acts_fail.FLAPLI) => acts_fail.FLAPLI)) and ((pre acts_fail.FLAPLO) => acts_fail.FLAPLO)) and ((pre acts_fail.FLAPRI) => acts_fail.FLAPRI)) and ((pre acts_fail.GEAR) => acts_fail.GEAR)) and ((pre acts_fail.BRAKE) => acts_fail.BRAKE)) and ((pre acts_fail.STEER) => acts_fail.STEER)));

  --%PROPERTY __GUARANTEE0;
  --%PROPERTY __GUARANTEE1;
  --%PROPERTY __GUARANTEE2;
  --%PROPERTY __GUARANTEE3;
  --%PROPERTY __GUARANTEE4;
  --%PROPERTY __GUARANTEE5;
  --%PROPERTY __GUARANTEE6;
  --%PROPERTY __GUARANTEE7;
  --%PROPERTY __GUARANTEE8;

  --%REALIZABLE elevators, ailerons, rudders, flaps, aoa, air_data, egi, spoilers, stabilizers, acts_ret, num_valid_acts;

tel;

node FCC_RC5__two_faults_in_range(
  f1 : bool;
  f2 : bool;
  f3 : bool;
  f4 : bool;
  select : real;
  high : real;
  low : real
) returns (
  ret : bool
);
var
  nf12 : bool;
  nf13 : bool;
  nf14 : bool;
  nf23 : bool;
  nf24 : bool;
  nf34 : bool;
let
  nf12 = (not (f1 or f2));

  nf13 = (not (f1 or f3));

  nf14 = (not (f1 or f4));

  nf23 = (not (f2 or f3));

  nf24 = (not (f2 or f4));

  nf34 = (not (f3 or f4));

  ret = ((((((nf12 or nf13) or nf14) or nf23) or nf24) or nf34) => ((low <= select) and (select <= high)));

tel;

node FCC_RC5__req_els(
  elevators_fault : DATA_TYPES__QUAD_Elevators__tbool;
  elevators_select : DATA_TYPES__Elevators__treal
) returns (
  ret : bool
);
let
  ret = (((FCC_RC5__two_faults_in_range(elevators_fault.EL1.ELLOB, elevators_fault.EL2.ELLOB, elevators_fault.EL3.ELLOB, elevators_fault.EL4.ELLOB, elevators_select.ELLOB, 50.0, 0.0) and FCC_RC5__two_faults_in_range(elevators_fault.EL1.ELLIB, elevators_fault.EL2.ELLIB, elevators_fault.EL3.ELLIB, elevators_fault.EL4.ELLIB, elevators_select.ELLIB, 50.0, 0.0)) and FCC_RC5__two_faults_in_range(elevators_fault.EL1.ELRIB, elevators_fault.EL2.ELRIB, elevators_fault.EL3.ELRIB, elevators_fault.EL4.ELRIB, elevators_select.ELRIB, 50.0, 0.0)) and FCC_RC5__two_faults_in_range(elevators_fault.EL1.ELROB, elevators_fault.EL2.ELROB, elevators_fault.EL3.ELROB, elevators_fault.EL4.ELROB, elevators_select.ELROB, 50.0, 0.0));

tel;

node FCC_RC5__req_ails(
  ailerons_fault : DATA_TYPES__QUAD_Ailerons__tbool;
  ailerons_select : DATA_TYPES__Ailerons__treal
) returns (
  ret : bool
);
let
  ret = (FCC_RC5__two_faults_in_range(ailerons_fault.AIL1.AILL, ailerons_fault.AIL2.AILL, ailerons_fault.AIL3.AILL, ailerons_fault.AIL4.AILL, ailerons_select.AILL, 50.0, 0.0) and FCC_RC5__two_faults_in_range(ailerons_fault.AIL1.AILR, ailerons_fault.AIL2.AILR, ailerons_fault.AIL3.AILR, ailerons_fault.AIL4.AILR, ailerons_select.AILR, 50.0, 0.0));

tel;

node FCC_RC5__req_flaps(
  flaps_fault : DATA_TYPES__QUAD_Flaps__tbool;
  flaps_select : DATA_TYPES__Flaps__treal
) returns (
  ret : bool
);
let
  ret = (((FCC_RC5__two_faults_in_range(flaps_fault.FLAPS1.FLLOB, flaps_fault.FLAPS2.FLLOB, flaps_fault.FLAPS3.FLLOB, flaps_fault.FLAPS4.FLLOB, flaps_select.FLLOB, 50.0, 0.0) and FCC_RC5__two_faults_in_range(flaps_fault.FLAPS1.FLLIB, flaps_fault.FLAPS2.FLLIB, flaps_fault.FLAPS3.FLLIB, flaps_fault.FLAPS4.FLLIB, flaps_select.FLLIB, 50.0, 0.0)) and FCC_RC5__two_faults_in_range(flaps_fault.FLAPS1.FLRIB, flaps_fault.FLAPS2.FLRIB, flaps_fault.FLAPS3.FLRIB, flaps_fault.FLAPS4.FLRIB, flaps_select.FLRIB, 50.0, 0.0)) and FCC_RC5__two_faults_in_range(flaps_fault.FLAPS1.FLROB, flaps_fault.FLAPS2.FLROB, flaps_fault.FLAPS3.FLROB, flaps_fault.FLAPS4.FLROB, flaps_select.FLROB, 50.0, 0.0));

tel;

node FCC_RC5__req_rud(
  rudders_fault : DATA_TYPES__QUAD_Rudders__tbool;
  rudders_select : DATA_TYPES__Rudders__treal
) returns (
  ret : bool
);
let
  ret = (FCC_RC5__two_faults_in_range(rudders_fault.RUDD1.RUDU, rudders_fault.RUDD2.RUDU, rudders_fault.RUDD3.RUDU, rudders_fault.RUDD4.RUDU, rudders_select.RUDU, 50.0, 0.0) and FCC_RC5__two_faults_in_range(rudders_fault.RUDD1.RUDL, rudders_fault.RUDD2.RUDL, rudders_fault.RUDD3.RUDL, rudders_fault.RUDD4.RUDL, rudders_select.RUDL, 50.0, 0.0));

tel;

node FCC_RC5__req_spoil(
  spoilers_fault : DATA_TYPES__QUAD_Spoilers__tbool;
  spoilers_select : DATA_TYPES__Spoilers__treal
) returns (
  ret : bool
);
let
  ret = (((FCC_RC5__two_faults_in_range(spoilers_fault.SPOIL1.SPLOB, spoilers_fault.SPOIL2.SPLOB, spoilers_fault.SPOIL3.SPLOB, spoilers_fault.SPOIL4.SPLOB, spoilers_select.SPLOB, 50.0, 0.0) and FCC_RC5__two_faults_in_range(spoilers_fault.SPOIL1.SPLIB, spoilers_fault.SPOIL2.SPLIB, spoilers_fault.SPOIL3.SPLIB, spoilers_fault.SPOIL4.SPLIB, spoilers_select.SPLIB, 50.0, 0.0)) and FCC_RC5__two_faults_in_range(spoilers_fault.SPOIL1.SPRIB, spoilers_fault.SPOIL2.SPRIB, spoilers_fault.SPOIL3.SPRIB, spoilers_fault.SPOIL4.SPRIB, spoilers_select.SPRIB, 50.0, 0.0)) and FCC_RC5__two_faults_in_range(spoilers_fault.SPOIL1.SPROB, spoilers_fault.SPOIL2.SPROB, spoilers_fault.SPOIL3.SPROB, spoilers_fault.SPOIL4.SPROB, spoilers_select.SPROB, 50.0, 0.0));

tel;

node FCC_RC5__req_stab(
  stabilizers_fault : DATA_TYPES__QUAD_Stabilizer__tbool;
  stabilizers_select : DATA_TYPES__Stabilizer__treal
) returns (
  ret : bool
);
let
  ret = FCC_RC5__two_faults_in_range(stabilizers_fault.STAB1, stabilizers_fault.STAB2, stabilizers_fault.STAB3, stabilizers_fault.STAB4, stabilizers_select.VAL, 50.0, 0.0);

tel;

node FCC_RC_2__output_range(
  num_valid : int;
  act : real;
  low : real;
  high : real
) returns (
  ret : bool
);
let
  ret = ((((((num_valid = 0) => ((low <= act) and (act <= (4.0 * high)))) and ((num_valid = 1) => ((low <= act) and (act <= (2.0 * high))))) and ((num_valid = 2) => ((low <= act) and (act <= ((4.0 / 3.0) * high))))) and ((num_valid = 3) => ((low <= act) and (act <= high)))) and ((num_valid = 4) => ((low <= act) and (act <= high))));

tel;

node FCC_RC_2__req(
  acts_out : DATA_TYPES__Actuators__impl;
  num_valid_acts : DATA_TYPES__NumActuators__impl
) returns (
  ret : bool
);
let
  ret = ((((((((((((((((((((FCC_RC_2__output_range(num_valid_acts.THROTL, acts_out.THROTL, 0.0, 50.0) and FCC_RC_2__output_range(num_valid_acts.THROTR, acts_out.THROTR, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.ELLOB, acts_out.ELLOB, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.ELLIB, acts_out.ELLIB, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.ELROB, acts_out.ELROB, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.ELRIB, acts_out.ELRIB, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.AILL, acts_out.AILL, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.AILR, acts_out.AILR, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.RUDUP, acts_out.RUDUP, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.RUDLO, acts_out.RUDLO, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.SPLLIB, acts_out.SPLLIB, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.SPLLOB, acts_out.SPLLOB, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.SPLRIB, acts_out.SPLRIB, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.SPLROB, acts_out.SPLROB, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.FLAPLI, acts_out.FLAPLI, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.FLAPLO, acts_out.FLAPLO, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.FLAPRI, acts_out.FLAPRI, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.FLAPRO, acts_out.FLAPRO, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.GEAR, acts_out.GEAR, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.BRAKE, acts_out.BRAKE, 0.0, 50.0)) and FCC_RC_2__output_range(num_valid_acts.STEER, acts_out.STEER, 0.0, 50.0));

tel;

node OSAS_S_140__req_helper(
  act : real;
  fail : bool
) returns (
  res : bool
);
let
  res = (fail => (act = 0.0));

tel;

node OSAS_S_140__req(
  acts : DATA_TYPES__Actuators__impl;
  fails : DATA_TYPES__BoolActuators__impl
) returns (
  res : bool
);
let
  res = ((((((((((((((((((((OSAS_S_140__req_helper(acts.AILL, fails.AILL) and OSAS_S_140__req_helper(acts.AILR, fails.AILR)) and OSAS_S_140__req_helper(acts.BRAKE, fails.BRAKE)) and OSAS_S_140__req_helper(acts.ELLIB, fails.ELLIB)) and OSAS_S_140__req_helper(acts.ELLOB, fails.ELLOB)) and OSAS_S_140__req_helper(acts.ELRIB, fails.ELRIB)) and OSAS_S_140__req_helper(acts.ELROB, fails.ELROB)) and OSAS_S_140__req_helper(acts.FLAPLI, fails.FLAPLI)) and OSAS_S_140__req_helper(acts.FLAPLO, fails.FLAPLO)) and OSAS_S_140__req_helper(acts.FLAPRI, fails.FLAPRI)) and OSAS_S_140__req_helper(acts.FLAPRO, fails.FLAPRO)) and OSAS_S_140__req_helper(acts.GEAR, fails.GEAR)) and OSAS_S_140__req_helper(acts.RUDLO, fails.RUDLO)) and OSAS_S_140__req_helper(acts.RUDUP, fails.RUDUP)) and OSAS_S_140__req_helper(acts.SPLLIB, fails.SPLLIB)) and OSAS_S_140__req_helper(acts.SPLLOB, fails.SPLLOB)) and OSAS_S_140__req_helper(acts.SPLRIB, fails.SPLRIB)) and OSAS_S_140__req_helper(acts.SPLROB, fails.SPLROB)) and OSAS_S_140__req_helper(acts.STEER, fails.STEER)) and OSAS_S_140__req_helper(acts.THROTR, fails.THROTR)) and OSAS_S_140__req_helper(acts.THROTL, fails.THROTL));

tel;


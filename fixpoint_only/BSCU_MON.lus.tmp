--Contains algebraic loop


type BSCU__SyncMsg__SyncMsgImpl = struct {Active : bool; Error : bool};
type BSCU__ChannelStatus__ChannelStatusImpl = struct {Active : bool; Cmd : int; Error : bool};
type BSCU__PanelMsg__PanelMsgImpl = struct {LO : bool; MAX : bool; MED : bool};

node main(
  Panel : BSCU__PanelMsg__PanelMsgImpl;
  CMD_From_COM : int;
  Sync_From : BSCU__SyncMsg__SyncMsgImpl;
  Pedal : int;
  Fail : bool;
  Sync_To : BSCU__SyncMsg__SyncMsgImpl;
  Status : BSCU__ChannelStatus__ChannelStatusImpl
) returns (

);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  Primary_Side : bool;
  Mode : int;
  Error : bool;
  Active : bool;
let
  --%MAIN;
  __GUARANTEE0 = ((not Fail) => (Status.Cmd = Agree_Nodes__Brake_Cmd(Mode, Pedal)));

  __GUARANTEE1 = (Status.Error = Error);

  __GUARANTEE2 = (Sync_To.Error = Error);

  __GUARANTEE3 = (Status.Active = Active);

  __GUARANTEE4 = (Sync_To.Active = Active);

  Primary_Side = false;

  Mode = Agree_Nodes__Brake_Mode(pre(Mode), Panel.LO, Panel.MED, Panel.MAX);

  Error = Agree_Nodes__Latch((Agree_Nodes__Duration((not (Status.Cmd = CMD_From_COM))) > 15));

  Active = ((not Sync_From.Active) -> (if Error then false else (if ((((pre Active) and Sync_From.Active) and (not Sync_From.Error)) and (not Primary_Side)) then false else (if ((not (pre Active)) and ((not Sync_From.Active) or Sync_From.Error)) then true else (pre Active)))));

  --%PROPERTY __GUARANTEE0;
  --%PROPERTY __GUARANTEE1;
  --%PROPERTY __GUARANTEE2;
  --%PROPERTY __GUARANTEE3;
  --%PROPERTY __GUARANTEE4;

  --%REALIZABLE Panel, CMD_From_COM, Sync_From, Pedal, Fail;

tel;

node Agree_Nodes__Brake_Cmd(
  mode : int;
  pedal : int
) returns (
  r : int
);
let
  r = (if (mode = 2) then 170 else (if (mode = 3) then 340 else (if (mode = 4) then 510 else pedal)));

tel;

node Agree_Nodes__Rise(
  p : bool
) returns (
  r : bool
);
let
  r = (false -> ((not (pre p)) and p));

tel;

node Agree_Nodes__Brake_Mode(
  mode : int;
  lo : bool;
  med : bool;
  max : bool
) returns (
  r : int
);
let
  r = (1 -> (if (((pre mode) = 2) and Agree_Nodes__Rise(lo)) then 1 else (if (((pre mode) = 3) and Agree_Nodes__Rise(med)) then 1 else (if (((pre mode) = 4) and Agree_Nodes__Rise(max)) then 1 else (if (((pre mode) <> 2) and Agree_Nodes__Rise(lo)) then 2 else (if (((pre mode) <> 3) and Agree_Nodes__Rise(med)) then 3 else (if (((pre mode) <> 4) and Agree_Nodes__Rise(max)) then 4 else (pre mode))))))));

tel;

node Agree_Nodes__Latch(
  p : bool
) returns (
  r : bool
);
let
  r = (p -> (p or (pre r)));

tel;

node Agree_Nodes__b2i(
  b : bool
) returns (
  i : int
);
let
  i = (if b then 1 else 0);

tel;

node Agree_Nodes__Duration(
  p : bool
) returns (
  c : int
);
var
  __nodeLemma0 : bool;
let
  c = (Agree_Nodes__b2i(p) -> (if p then ((pre c) + 1) else 0));

  __nodeLemma0 = (c >= 0);

  --%PROPERTY __nodeLemma0;

tel;
